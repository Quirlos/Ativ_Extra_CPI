# -*- coding: utf-8 -*-
"""Atividade CPI - Leitura em tempo real.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HZxxxwYj-3i-W6vxeiHKmyYfe9bDCCNB

Atividade CPI - Captação e leitura de dados em tempo real
"""

#Importando bibliotecas
import serial
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore, QtGui
import time

#Configuração da porta serial (ajustar conforme necessário)
ser = serial.Serial('COM7', 115200, timeout=0.1)  # Mudar a porta de acordo com a porta do seu Arduino

#Configurações da janela de plotagem usando a biblioteca PyQtGraph
app = QtGui.QApplication([])
win = pg.GraphicsLayoutWidget(show=True, title="Leitura Serial em Tempo Real")
win.resize(1000, 800)
win.setWindowTitle('Controlador PID - Arduino UNO')

#Criação dos gráficos
plot = win.addPlot(title="System Output (Actual) and Setpoint vs Time")
curve_actual = plot.plot(pen='b', name='Actual')  #Curva para os valores reais
curve_setpoint = plot.plot(pen=pg.mkPen('w', style=QtCore.Qt.DashLine), name='Setpoint')  #Curva para os valores de setpoint

#Listas para armazenamento dos dados
time_data = []
actual_data = []
setpoint_data = []

#Duração total da coleta de dados (s)
total_duration = 40
start_time = time.time()

print(f"Coletando dados por {total_duration} segundos...")

def update():
    """ Função de atualização chamada a cada iteração. """
    global time_data, actual_data, setpoint_data

    #Leitura dos dados provenientes da porta serial
    line = ser.readline().decode('utf-8').strip()
    if line:
        data = line.split(',')
        if len(data) == 5:  #Certificando que há 5 valores
            try:
                #Captura do tempo, setpoint e valor atual
                current_time = float(data[0])  #1° valor = tempo
                setpoint = float(data[1])  #2° valor = setpoint
                actual = float(data[2])  #3° valor = valor atual

                #Cálculo do tempo decorrido em relação ao início do processo de coleta
                elapsed_time = current_time - start_time

                #Adicionando os dados nas listas
                time_data.append(elapsed_time)
                setpoint_data.append(setpoint)
                actual_data.append(actual)

                #Atualizaçã das curvas do gráfico
                curve_actual.setData(time_data, actual_data)
                curve_setpoint.setData(time_data, setpoint_data)

            except ValueError:
                pass  #Ignora erros de conversão

#Configuração do timer para atualização dos gráficos em tempo real
timer = QtCore.QTimer()
timer.timeout.connect(update)
timer.start(50)  #Atualiza a cada 50 ms

#Executação do PyQtGraph
if __name__ == '__main__':
    try:
        QtGui.QApplication.instance().exec_()
    except KeyboardInterrupt:
        print("Coleta de dados interrompida pelo usuário.")
    finally:
        ser.close()  #Fecha a comunicação com a porta serial do Arduino